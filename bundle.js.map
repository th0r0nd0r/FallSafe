{"version":3,"sources":["webpack:///webpack/bootstrap f749c5811f62371d021b","webpack:///./point.js","webpack:///./entry.js","webpack:///./physics.js","webpack:///./link.js","webpack:///./seed_data.js","webpack:///./body.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC7DA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gFAA8B,4DAA4D;AAC1F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACnJA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;;;ACXD;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4DAA4D,UAAU;AACtE;;AAEA;AACA,2DAA2D,UAAU;AACrE;;AAEA;AACA,6DAA6D,QAAQ;AACrE;;AAEA;AACA,gEAAgE,UAAU;AAC1E;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,4DAA4D;AAC5F,UAAU;AACV,6BAA6B,4DAA4D;AACzF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,yBAAyB;AAC1C,yBAAyB,mBAAmB;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;AACA,SAAS,oDAAoD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;;ACvXA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACTA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2FAA2F;AAC5G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6FAA6F;AAC9G;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6FAA6F;AAC9G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6FAA6F;AAC9G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+FAA+F;AAChH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iGAAiG;AAClH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yFAAyF;AAC1G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yFAAyF;AAC1G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6FAA6F;AAC9G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+FAA+F;AAChH;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,yBAAyB,sFAAsF;AAC/G,8BAA8B,2FAA2F;AACzH,+BAA+B,4FAA4F;AAC3H,6BAA6B,4FAA4F;AACzH,8BAA8B,+FAA+F;AAC7H,2BAA2B,wFAAwF;AACnH,2BAA2B,wFAAwF;AACnH,2BAA2B,0FAA0F;AACrH,6BAA6B,0FAA0F;AACvH,8BAA8B,6FAA6F;AAC3H;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f749c5811f62371d021b","import Link from './link';\n\nconst canvas = document.getElementById(\"canvas\");\n// // // // console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\nclass Point {\n  constructor(options) {\n    // // // console.log(\"options:\", options);\n    this.lastX = options.lastX;\n    this.lastY = options.lastY;\n    this.nextX = options.nextX;\n    this.nextY = options.nextY;\n    this.position = options.position;\n    // // // console.log(\"pointPosition:\", this.position);\n    this.velocity = options.velocity;\n    this.mass = options.mass;\n    this.radius = options.radius;\n    this.area = (Math.PI * this.radius * this.radius) / 10000;\n    this.pinned = options.pinned || false;\n    this.aX = 0;\n    if (options.aY) {\n      this.aY = options.aY;\n    } else {\n      this.aY = 20.81;\n    }\n    this.links = options.links || [];\n    if (options.isAnchor) {\n      this.isAnchor = options.isAnchor;\n    } else {\n      this.isAnchor = false;\n    }\n\n    this.updatePos = this.updatePos.bind(this);\n    this.collideWith = this.collideWith.bind(this);\n    this.applyForce = this.applyForce.bind(this);\n    this.solveLinkConstraints = this.solveLinkConstraints.bind(this);\n    this.addLinkTo = this.addLinkTo.bind(this);\n    this.removeLink = this.removeLink.bind(this);\n    this.render = this.render.bind(this);\n  }\n\n  updatePos(timeElapsed) {\n    // this.applyForce({x: 0, y: })\n    const seconds = timeElapsed / 100;\n    // // // console.log(\"seconds\", seconds);\n    // // // console.log(\"this.aX\", this.aX);\n\n    let deltaX = this.position.x - this.lastX;\n    let deltaY = this.position.y - this.lastY;\n\n    // damping velocity\n    deltaX *= .95;\n    deltaY *= .95;\n    // // // console.log(\"this.position.x\", this.position.x);\n    // // // console.log(\"acc component\", (0.5 * this.aX * seconds * seconds));\n    this.nextX = this.position.x + deltaX + (0.5 * this.aX * seconds * seconds);\n    this.nextY = this.position.y + deltaY + (0.5 * this.aY * seconds * seconds);\n    // // // console.log(\"NextX:\", this.nextX);\n\n\n\n    this.lastX = this.position.x;\n    this.lastY = this.position.y;\n\n    if (!this.pinned) {\n      this.position.x = this.nextX;\n      this.position.y = this.nextY;\n    } else {\n      this.nextX = this.position.x;\n      this.nextY = this.position.y;\n    }\n  }\n\n  collideWith(pt2) {\n    if (!this.pinned) {\n      this.position.x = this.lastX;\n      this.position.y = this.lastY;\n    }\n  }\n\n  // collideWithLink(link) {\n  //   // // // console.log(\"collideLink:\", link);\n  //   debugger;\n  //   link.point1.pinned = true;\n  //   // link.point1.position.x = 1;\n  //   // link.point1.position.y = 1;\n  //   link.point2.pinned = true;\n  // }\n\n  applyForce(force) {\n    this.aX += force.x / this.mass;\n    this.aY += force.y / this.mass;\n  }\n\n  solveLinkConstraints() {\n    for (let i = 0; i < this.links.length; i++) {\n      this.links[i].solve();\n    }\n\n\n  }\n\n  addLinkTo(options) {\n    let drawThis;\n    if (options.drawThis) {\n      drawThis = options.drawThis;\n    } else {\n      drawThis = true;\n    }\n    const otherPoint = options.otherPoint;\n    const restingDistance = options.restingDistance;\n    // debugger;\n    const newLink = new Link({point1: this, point2: otherPoint, drawThis, restingDistance});\n    // // // console.log(\"newLink:\", newLink);\n    this.links.push(newLink);\n    otherPoint.links.push(newLink);\n    // // // console.log(\"links:\", this.links);\n  }\n\n  removeLink(link) {\n    this.links.splice(this.links.indexOf(link), 1);\n  }\n\n  render() {\n    // debugger;\n    // ctx.translate(point.position.x, point.position.y);\n    // ctx.clearRect(0,0,width, height);\n    if (this.isAnchor) {\n      ctx.fillStyle = 'black';\n      ctx.strokeStyle = '#000000';\n      ctx.beginPath();\n      ctx.arc(this.position.x, this.position.y, this.radius * 5, 0, Math.PI*2, true);\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    const links = this.links;\n\n    if (links.length > 0) {\n      for (let i = 0; i < links.length; i++) {\n        links[i].render();\n      }\n    }\n  }\n}\n\nexport default Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./point.js\n// module id = 0\n// module chunks = 0","import './physics.js';\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  // ctx.fillStyle = 'green';\n  // ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./entry.js\n// module id = 1\n// module chunks = 0","import Point from './point';\nimport SeedData from './seed_data';\nimport Body from './body';\n\nconst canvas = document.getElementById(\"canvas\");\n// // // // console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\n\n\nconst width = canvas.width;\nconst height = canvas.height;\n\nlet startTime;\nlet lastTime;\nlet timeElapsed = 0;\nlet req;\nlet animate;\n\n\nconst requestAnimationFrame = window.requestAnimationFrame ||\n                              window.mozRequestAnimationFrame ||\n                              window.webkitRequestAnimationFrame ||\n                              window.msRequestAnimationFrame;\n\nconst cancelAnimationFrame = window.cancelAnimationFrame ||\n                              window.mozCancelAnimationFrame ||\n                              window.webkitCancelAnimationFrame ||\n                              window.msCancelAnimationFrame;\n\n// slider functions\n\nconst showRopeLength = (newLength) => {\n  document.getElementById(\"rope-length-value\").innerHTML=`${newLength} m`;\n};\n\nconst showProHeight = (newHeight) => {\n  document.getElementById(\"pro-height-value\").innerHTML=`${newHeight} m`;\n};\n\nconst showClimberMass = (newMass) => {\n  document.getElementById(\"climber-mass-value\").innerHTML=`${newMass} kg`;\n};\n\nconst showStrengthRating = (newRating) => {\n  document.getElementById(\"strength-rating-value\").innerHTML=`${newRating} kN`;\n};\n\n\nwindow.showRopeLength = showRopeLength;\nwindow.showProHeight = showProHeight;\nwindow.showClimberMass = showClimberMass;\nwindow.showStrengthRating = showStrengthRating;\n\n\n\n\n\nlet points = [];\nlet body;\nlet belayer;\nconst seeds = new SeedData({\n  numPoints: 50,\n  anchorValue: 25,\n  climberMass: 300,\n  strengthRating: 12\n});\n\nconst ropeLength = document.getElementById(\"rope-length\");\nropeLength.addEventListener(\"change\", (e) => {\n  seeds.numPoints = parseInt(e.target.value);\n  if (req) {\n    cancelAnimationFrame(req);\n  }\n  loops = 0;\n  startTime = undefined;\n  seedPoints(seeds.numPoints, seeds.anchorValue, seeds.climberMass);\n  // // // console.log(\"seeded\");\n  animate();\n});\n\nconst proHeight = document.getElementById(\"pro-height\");\nproHeight.addEventListener(\"change\", (e) => {\n  seeds.anchorValue = parseInt(e.target.value);\n  if (req) {\n    cancelAnimationFrame(req);\n  }\n  loops = 0;\n  startTime = undefined;\n  seedPoints(seeds.numPoints, seeds.anchorValue, seeds.climberMass);\n  // // // console.log(\"seeded\");\n  animate();\n});\n\nconst strengthRating = document.getElementById(\"strength-rating\");\nstrengthRating.addEventListener(\"change\", (e) => {\n  seeds.strengthRating = parseInt(e.target.value);\n  if (req) {\n    cancelAnimationFrame(req);\n  }\n  loops = 0;\n  startTime = undefined;\n  seedPoints(seeds.numPoints, seeds.anchorValue, seeds.climberMass);\n  // // // console.log(\"seeded\");\n  animate();\n});\n\n\n\n\nconst seedPoints = (numPoints, anchorValue, cMass) => {\n  // // // console.log(\"numPoints\", numPoints);\n  ctx.clearRect(0,0,width, height);\n  points = [];\n\n  const xModifier = 0.00125;\n  const yModifier = 0.0025;\n\n  let lastX = (.7 * width);\n  let lastY = (0.8 * height);\n  var x = lastX;\n  var y = lastY;\n  let nextX = lastX;\n  let nextY = lastY;\n  let velocity = {x: 0, y: 0};\n  let mass = 20;\n  let radius = 1;\n\n  const restingDistance = Math.sqrt((yModifier * height) * (yModifier * height) + (xModifier * width) * (xModifier * width));\n  for (let i = 0; i < numPoints; i++) {\n    // // // console.log(\"x, y:\", x, y);\n\n\n\n    const position = {\n      x,\n      y\n    };\n    // Object.freeze(position);\n    // // // console.log(\"position:\", position);\n    const pointObj = {\n      lastX,\n      lastY,\n      nextX,\n      nextY,\n      x,\n      y,\n      position,\n      velocity,\n      mass,\n      radius\n    };\n    // // // // console.log(\"pointObj:\", pointObj);\n\n    Object.freeze(pointObj);\n    const newPoint = new Point(pointObj);\n    // // // console.log(\"newPoint\", newPoint);\n\n\n  // puts pro at half of rope length\n    // if (numPoints % 2 === 0) {\n    //   if (i === (numPoints / 2)) {\n    //     newPoint.pinned = true;\n    //     newPoint.isAnchor = true;\n    //   }\n    // } else {\n    //   if (i === (numPoints / 2 + 0.5)) {\n    //     newPoint.pinned = true;\n    //     newPoint.isAnchor = true;\n    //   }\n    // }\n    //\n\n    if (i === 0) {\n      newPoint.pinned = true;\n      newPoint.isAnchor = true;\n    }\n\n    if (i < anchorValue) {\n      newPoint.mass = 1;\n      newPoint.aY = 2;\n    }\n\n    if (i === (numPoints - 1)) {\n      newPoint.mass = cMass;\n    }\n\n    if (i === anchorValue) {\n      newPoint.pinned = true;\n      newPoint.isAnchor = true;\n    } else {\n      // newPoint.pinned = false;\n      // newPoint.isAnchor = false;\n    }\n\n    points.push(newPoint);\n\n    if (i > numPoints / 2) {\n      lastX -= (xModifier * width);\n      lastY -= (yModifier * height);\n      // console.log(\"currentPoint:\", newPoint, \"i:\", i, \"lastY:\", lastY);\n      nextX -= (xModifier * width);\n      nextY -= (yModifier * height);\n      x -= (xModifier * width);\n      y -= (yModifier * height);\n    } else {\n      lastX -= (xModifier * width * 8);\n      lastY -= (yModifier * height * 8);\n      // console.log(\"currentPoint:\", newPoint, \"i:\", i, \"lastY:\", lastY);\n      nextX -= (xModifier * width * 8);\n      nextY -= (yModifier * height * 8);\n      x -= (xModifier * width * 8);\n      y -= (yModifier * height * 8);\n    }\n\n    if (points.length > 1) {\n      // if (points.length < 200) {\n      //   points[i].addLinkTo({otherPoint: points[i - 1], drawThis: false, restingDistance});\n      // } else {\n        points[i].addLinkTo({otherPoint: points[i - 1], drawThis: false, restingDistance});\n      // }\n    }\n    // debugger;\n\n  }\n  // console.log(\"points before body:\", points);\n  body = new Body(points[points.length - 1], 1, 1);\n  belayer = new Body(points[0], 1, 1);\n  // console.log(\"points:\", points);\n  // console.log(\"body:\", body);\n};\n\nconst checkCollisions = (points) => {\n  for (let i = 0; i < (points.length - 1); i++) {\n    for (let j = (i + 1); j < points.length; j++) {\n      const pt1 = points[i];\n      const pt2 = points[j];\n\n      if ((pt1 !== pt2) && isCollidedWith(pt1, pt2) && (pt1.pinned || pt2.pinned)) {\n        // // // // console.log(\"collision?\", isCollidedWith(pt1, pt2));\n        pt1.collideWith(pt2);\n        pt2.collideWith(pt1);\n      }\n    }\n  }\n};\n\n\n\nconst isCollidedWith = (point, point2) => {\n  // debugger;\n  const pos1 = {x: point.position.x, y: point.position.y};\n  const pos2 = {x: point2.position.x, y: point2.position.y};\n  const deltaX = ((pos1.x - pos2.x) * (pos1.x - pos2.x));\n  const deltaY = ((pos1.y - pos2.y) * (pos1.y - pos2.y));\n  const d = Math.sqrt(deltaX + deltaY);\n\n  if (d <= (point.radius + point2.radius)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nlet loops = 0;\n\nseedPoints(seeds.numPoints, seeds.anchorValue, seeds.climberMass);\n// // // console.log(\"initial seed\");\nconst climberStartHeight = points[points.length - 1].position.y;\n\n\n\nanimate = (currentTime) => {\n  const {numPoints, anchorValue, climberMass, strengthRating} = seeds;\n  const g = points[points.length - 1].aY;\n  // force of fall\n  const forceIsh = 2 * climberMass * g * numPoints / 2;\n  // // console.log(\"forceIsh\", forceIsh);\n  // force piece can take\n  const compareForce = 2 * climberMass * g * anchorValue * (strengthRating / 8);\n  // // console.log(\"compareForce\", compareForce);\n\n  loops++;\n  // // // // console.log(\"loops\", loops);\n  // // // // console.log(\"animate\");\n  if (!startTime) {\n    startTime = currentTime;\n    lastTime = currentTime;\n  } else {\n    // // // console.log(\"currentTime\", currentTime);\n    timeElapsed = currentTime - lastTime;\n    // // // console.log(\"timeElapsed\", timeElapsed);\n    lastTime = currentTime;\n\n\n    ctx.clearRect(0,0,width, height);\n    for (let i = 0; i < points.length; i++) {\n      points[i].updatePos(timeElapsed);\n      // // console.log(\"climberStartHeight\", climberStartHeight);\n      const climberHeight = points[points.length - 1].position.y;\n      // // console.log(\"points\", points);\n      // // console.log(\"seeds\", seeds);\n      const pHeight = points[seeds.anchorValue].position.y;\n      const fallDist = (pHeight - climberStartHeight);\n      // // console.log(\"climberHeight\", climberHeight);\n      // // console.log(\"pHeight\", pHeight);\n      // // console.log(\"fallDist\", fallDist);\n      const isCaught = Boolean(climberHeight > (pHeight + fallDist));\n      // // console.log(\"isCaught\", isCaught);\n      if (isCaught) {\n        if (forceIsh <= compareForce) {\n          for (let j = 0; j < seeds.anchorValue; j++) {\n            points[j].mass = 10;\n            points[j].aY = 0;\n        }\n      } else if (climberHeight > points[points.length - 2].position.y){\n        points[seeds.anchorValue].pinned = false;\n      }\n      }\n    }\n    body.updatePos(timeElapsed);\n\n    for (let i = 0; i < points.length; i++) {\n      points[i].solveLinkConstraints();\n    }\n    body.solveLinkConstraints();\n    for (let i = 0; i < points.length; i++) {\n      points[i].solveLinkConstraints();\n    }\n    body.solveLinkConstraints();\n    for (let i = 0; i < points.length; i++) {\n      points[i].solveLinkConstraints();\n    }\n    body.solveLinkConstraints();\n\n    // checkCollisions(points);\n    // checkLinkCollisions(points);\n\n    for (let i = 0; i < points.length; i++) {\n      points[i].render();\n    }\n    body.render();\n    belayer.render();\n    // console.log(\"body:\", body);\n    // debugger;\n    ctx.beginPath();\n        ctx.moveTo(820, 700);\n        ctx.lineTo(1000, 700);\n        ctx.lineTo(1000, 0);\n        ctx.lineTo(320, 0);\n        ctx.fill();\n  }\n\n  //\n  // ctx.save();\n  //\n  // ctx.restore();\n\n\n\n  if (loops <= 200) {\n    req = requestAnimationFrame(animate);\n  } else {\n    cancelAnimationFrame(req);\n    startTime = undefined;\n    loops = 0;\n    if (forceIsh <= compareForce) {\n      alert(\"safe!\");\n    } else {\n      alert(\"not safe!\");\n    }\n  }\n\n};\n\nanimate();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./physics.js\n// module id = 2\n// module chunks = 0","// this method of constructing links using verlet integration was adopted from\n// this tutorial by Jared Counts https://gamedevelopment.tutsplus.com/tutorials/simulate-tearable-cloth-and-ragdolls-with-simple-verlet-integration--gamedev-519\n\nconst canvas = document.getElementById(\"canvas\");\n// // // // console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\nclass Link {\n  constructor(options) {\n    this.point1 = options.point1;\n    this.point2 = options.point2;\n    // // // // console.log(\"linkOptionsRestingDistance:\", options.restingDistance);\n    if (options.restingDistance) {\n      this.restingDistance = options.restingDistance;\n    } else {\n      this.restingDistace = 100;\n    }\n    // // // // console.log(\"linkrestingDistance:\", this.restingDistance);\n    this.stiffness = options.stiffness || 1;\n    this.tearDist = options.tearDist || 1000000;\n    if (options.drawThis) {\n      this.drawThis = options.drawThis;\n    } else {\n      this.drawThis = true;\n    }\n  }\n\n  solve() {\n    const p1 = this.point1.position;\n    const p2 = this.point2.position;\n    const m1 = this.point1.mass;\n    const m2 = this.point2.mass;\n\n    const difference = { x: p1.x - p2.x, y: p1.y - p2.y };\n    const d = Math.sqrt(difference.x * difference.x + difference.y * difference.y);\n\n    if (d > this.tearDist) {\n      this.point1.removeLink(this);\n    }\n\n    const scalarD = (this.restingDistance - d) / d;\n\n\n    const invMass1 = 1 / m1;\n    const invMass2 = 1 / m2;\n    const scalarP1 = (invMass1 / (invMass1 + invMass2)) * this.stiffness;\n    const scalarP2 = this.stiffness - scalarP1;\n\n\n    if (!this.point1.pinned) {\n      p1.x += difference.x * scalarP1 * scalarD;\n      p1.y += difference.y * scalarP1 * scalarD;\n    }\n\n    if (!this.point2.pinned) {\n      p2.x -= difference.x * scalarP2 * scalarD;\n      p2.y -= difference.y * scalarP2 * scalarD;\n    }\n  }\n\n  render() {\n    const p1 = this.point1.position;\n    const p2 = this.point2.position;\n    if (this.drawThis) {\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n    }\n  }\n}\n\nexport default Link;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./link.js\n// module id = 3\n// module chunks = 0","class SeedData {\n  constructor(options) {\n    this.numPoints = options.numPoints;\n    this.anchorValue = options.anchorValue;\n    this.climberMass = options.climberMass;\n    this.strengthRating = options.strengthRating;\n  }\n}\n\nexport default SeedData;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./seed_data.js\n// module id = 4\n// module chunks = 0","import Point from './point';\n\nclass Body {\n  constructor(pelvis, XModifier, YModifier) {\n    this.pelvis = pelvis;\n    // console.log(\"pelvis:\", this.pelvis);\n    this.shoulder = new Point({\n      // aY: .0001\n      lastX: this.pelvis.lastX - (15 * XModifier),\n      lastY: this.pelvis.lastY - (15 * YModifier),\n      nextX: this.pelvis.lastX - (15 * XModifier),\n      nextY: this.pelvis.lastY - (15 * YModifier),\n      position: {x: this.pelvis.position.x - (15 * XModifier), y: this.pelvis.position.y - (15 * YModifier)},\n      mass: 10,\n      radius: 1\n    });\n    this.head = new Point({\n      // aY: .0001\n      lastX: this.shoulder.lastX - (5 * XModifier),\n      lastY: this.shoulder.lastY - (5 * YModifier),\n      nextX: this.shoulder.lastX - (5 * XModifier),\n      nextY: this.shoulder.lastY - (5 * YModifier),\n      position: {x: this.shoulder.position.x - (5 * XModifier), y: this.shoulder.position.y - (5 * YModifier)},\n      mass: 6,\n      radius: 1.5,\n      isAnchor: true\n    });\n    this.leftElbow = new Point({\n      // aY: .0001\n      lastX: this.shoulder.lastX + (7 * XModifier),\n      lastY: this.shoulder.lastY - (7 * YModifier),\n      nextX: this.shoulder.lastX + (7 * XModifier),\n      nextY: this.shoulder.lastY - (7 * YModifier),\n      position: {x: this.shoulder.position.x + (7 * XModifier), y: this.shoulder.position.y - (7 * YModifier)},\n      mass: 2,\n      radius: 1,\n    });\n    this.rightElbow = new Point({\n      // aY: .0001\n      lastX: this.shoulder.lastX + (6 * XModifier),\n      lastY: this.shoulder.lastY - (8 * YModifier),\n      nextX: this.shoulder.lastX + (6 * XModifier),\n      nextY: this.shoulder.lastY - (8 * YModifier),\n      position: {x: this.shoulder.position.x + (6 * XModifier), y: this.shoulder.position.y - (8 * YModifier)},\n      mass: 2,\n      radius: 1,\n    });\n    this.leftHand = new Point({\n      // aY: .0001\n      lastX: this.leftElbow.lastX + (6 * XModifier),\n      lastY: this.leftElbow.lastY - (8 * YModifier),\n      nextX: this.leftElbow.lastX + (6 * XModifier),\n      nextY: this.leftElbow.lastY - (8 * YModifier),\n      position: {x: this.leftElbow.position.x + (6 * XModifier), y: this.leftElbow.position.y - (8 * YModifier)},\n      mass: 4,\n      radius: 1,\n    });\n    this.rightHand = new Point({\n      // aY: .0001\n      lastX: this.rightElbow.lastX + (7 * XModifier),\n      lastY: this.rightElbow.lastY - (7 * YModifier),\n      nextX: this.rightElbow.lastX + (7 * XModifier),\n      nextY: this.rightElbow.lastY - (7 * YModifier),\n      position: {x: this.rightElbow.position.x + (7 * XModifier), y: this.rightElbow.position.y - (7 * YModifier)},\n      mass: 4,\n      radius: 1,\n    });\n    this.leftKnee = new Point({\n      // aY: .0001\n      lastX: this.pelvis.lastX + (7 * XModifier),\n      lastY: this.pelvis.lastY + (7 * YModifier),\n      nextX: this.pelvis.lastX + (7 * XModifier),\n      nextY: this.pelvis.lastY + (7 * YModifier),\n      position: {x: this.pelvis.position.x + (7 * XModifier), y: this.pelvis.position.y + (7 * YModifier)},\n      mass: 2,\n      radius: 1,\n    });\n    this.rightKnee = new Point({\n      // aY: .0001\n      lastX: this.pelvis.lastX + (5 * XModifier),\n      lastY: this.pelvis.lastY + (9 * YModifier),\n      nextX: this.pelvis.lastX + (5 * XModifier),\n      nextY: this.pelvis.lastY + (9 * YModifier),\n      position: {x: this.pelvis.position.x + (5 * XModifier), y: this.pelvis.position.y + (9 * YModifier)},\n      mass: 2,\n      radius: 1,\n    });\n    this.leftFoot = new Point({\n      // aY: .0001\n      lastX: this.leftKnee.lastX + (5 * XModifier),\n      lastY: this.leftKnee.lastY + (9 * YModifier),\n      nextX: this.leftKnee.lastX + (5 * XModifier),\n      nextY: this.leftKnee.lastY + (9 * YModifier),\n      position: {x: this.leftKnee.position.x + (5 * XModifier), y: this.leftKnee.position.y + (9 * YModifier)},\n      mass: 4,\n      radius: 1,\n    });\n    this.rightFoot = new Point({\n      // aY: .0001\n      lastX: this.rightKnee.lastX + (5 * XModifier),\n      lastY: this.rightKnee.lastY + (9 * YModifier),\n      nextX: this.rightKnee.lastX + (5 * XModifier),\n      nextY: this.rightKnee.lastY + (9 * YModifier),\n      position: {x: this.rightKnee.position.x + (5 * XModifier), y: this.rightKnee.position.y + (9 * YModifier)},\n      mass: 4,\n      radius: 1,\n    });\n\n    const restingDistance = (p1, p2) => {\n      return(Math.sqrt((p1.position.x - p2.position.x) * (p1.position.x - p2.position.x) + (p1.position.y - p2.position.y) * (p1.position.y - p2.position.y)));\n    };\n\n    this.head.addLinkTo({otherPoint: this.shoulder, restingDistance: restingDistance(this.head, this.shoulder)});\n    this.leftElbow.addLinkTo({otherPoint: this.shoulder, restingDistance: restingDistance(this.leftElbow, this.shoulder)});\n    this.rightElbow.addLinkTo({otherPoint: this.shoulder, restingDistance: restingDistance(this.rightElbow, this.shoulder)});\n    this.leftHand.addLinkTo({otherPoint: this.leftElbow, restingDistance: restingDistance(this.leftHand, this.leftElbow)});\n    this.rightHand.addLinkTo({otherPoint: this.rightElbow, restingDistance: restingDistance(this.rightHand, this.rightElbow)});\n    this.pelvis.addLinkTo({otherPoint: this.shoulder, restingDistance: restingDistance(this.pelvis, this.shoulder)});\n    this.pelvis.addLinkTo({otherPoint: this.leftKnee, restingDistance: restingDistance(this.pelvis, this.leftKnee)});\n    this.pelvis.addLinkTo({otherPoint: this.rightKnee, restingDistance: restingDistance(this.pelvis, this.rightKnee)});\n    this.leftFoot.addLinkTo({otherPoint: this.leftKnee, restingDistance: restingDistance(this.leftFoot, this.leftKnee)});\n    this.rightFoot.addLinkTo({otherPoint: this.rightKnee, restingDistance: restingDistance(this.rightFoot, this.rightKnee)});\n  }\n\n  updatePos(timeElapsed) {\n    this.head.updatePos(timeElapsed);\n    this.shoulder.updatePos(timeElapsed);\n    this.pelvis.updatePos(timeElapsed);\n    this.leftElbow.updatePos(timeElapsed);\n    this.rightElbow.updatePos(timeElapsed);\n    this.leftHand.updatePos(timeElapsed);\n    this.rightHand.updatePos(timeElapsed);\n    this.leftKnee.updatePos(timeElapsed);\n    this.rightKnee.updatePos(timeElapsed);\n    this.leftFoot.updatePos(timeElapsed);\n    this.rightFoot.updatePos(timeElapsed);\n  }\n\n  render() {\n    this.head.render();\n    this.shoulder.render();\n    this.pelvis.render();\n    this.leftElbow.render();\n    this.rightElbow.render();\n    this.leftHand.render();\n    this.rightHand.render();\n    this.leftKnee.render();\n    this.rightKnee.render();\n    this.leftFoot.render();\n    this.rightFoot.render();\n  }\n\n  solveLinkConstraints() {\n    this.head.solveLinkConstraints();\n    this.shoulder.solveLinkConstraints();\n    this.pelvis.solveLinkConstraints();\n    this.leftElbow.solveLinkConstraints();\n    this.rightElbow.solveLinkConstraints();\n    this.leftHand.solveLinkConstraints();\n    this.rightHand.solveLinkConstraints();\n    this.leftKnee.solveLinkConstraints();\n    this.rightKnee.solveLinkConstraints();\n    this.leftFoot.solveLinkConstraints();\n    this.rightFoot.solveLinkConstraints();\n  }\n}\n\nexport default Body;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./body.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}
