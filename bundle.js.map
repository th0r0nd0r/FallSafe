{"version":3,"sources":["webpack:///webpack/bootstrap 836923623f4808e27035","webpack:///./entry.js","webpack:///./physics.js","webpack:///./point.js","webpack:///./link.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;ACXD;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC,aAAa,WAAW;AACxB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC,aAAa,WAAW;AACxB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC,aAAa,WAAW;AACxB;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,mBAAmB;AACpC,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,mBAAmB;AACpC,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;;AAEA;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;;;;;;;;ACjLA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,UAAU;AAClC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;;;AAGA;;AAEA;AACA,gFAA8B,6BAA6B;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC5GA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 836923623f4808e27035","import './physics.js';\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  // ctx.fillStyle = 'green';\n  // ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./entry.js\n// module id = 0\n// module chunks = 0","import Point from './point';\n\nconst canvas = document.getElementById(\"canvas\");\n// console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\n\nconst width = canvas.width;\nconst height = canvas.height;\n\nlet startTime;\nlet lastTime;\nlet timeElapsed = 0;\n\n\nconst requestAnimationFrame = window.requestAnimationFrame ||\n                              window.mozRequestAnimationFrame ||\n                              window.webkitRequestAnimationFrame ||\n                              window.msRequestAnimationFrame;\n\n\nconst point = new Point({\n  lastX: width/2,\n  lastY: height/2,\n  nextX: width/2,\n  nextY: height/2,\n  position: {x: width/2, y: height/2},\n  velocity: {x: 0, y: 0},\n  mass: 700,\n  radius: 20\n});\n\nconst point2 = new Point({\n  lastX: width/3,\n  lastY: height/2,\n  nextX: width/3,\n  nextY: height/2,\n  position: {x: width/3, y: height/2},\n  velocity: {x: 0, y: 0},\n  mass: 70000,\n  radius: 20\n});\n\nconst point3 = new Point({\n  lastX: width/3,\n  lastY: height/2,\n  nextX: width/4,\n  nextY: height/3,\n  pinned: true,\n  position: {x: width/4, y: height/6},\n  velocity: {x: 0, y: 0},\n  mass: 70,\n  radius: 10\n});\n\nconst points = [point, point2, point3];\nconst g = 9.81;\n\npoint.addLinkTo(point3);\npoint.addLinkTo(point2);\n\nconst checkCollisions = (points) => {\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 1; j < points.length; j++) {\n      const pt1 = points[i];\n      const pt2 = points[j];\n\n      if (isCollidedWith(pt1, pt2)) {\n        pt1.collideWith(pt2);\n        pt2.collideWith(pt1);\n      }\n    }\n  }\n};\n\nconst checkLinkCollisions = (points) => {\n  const links = [];\n  const pinned = [];\n  for (let i = 0; i < points.length; i++) {\n    if (points[i].pinned) {\n      pinned.push(points[i]);\n    }\n    points[i].links.forEach((link) => {\n      links.push(link);\n    });\n  }\n  // debugger;\n  for (let i = 0; i < pinned.length; i++) {\n    for (let j = 0; j < links.length; j++) {\n      let pinnedPt = pinned[i];\n      let link = links[j];\n      if (isCollidedWithLink(pinnedPt, link)) {\n        pinnedPt.collideWithLink(link);\n      }\n    }\n  }\n};\n\nconst isCollidedWithLink = (pinnedPt, link) => {\n  let lowX;\n  let highX;\n\n  console.log(\"pinnedPt:\", pinnedPt);\n  console.log(\"pinnedPt.position:\", pinnedPt.position);\n\n\n  const pinnedPos = pinnedPt.position;\n  const p1Pos = link.point1.position;\n  const p2Pos = link.point2.position;\n  console.log(\"p1Pos:\", p1Pos, \"p2Pos:\", p2Pos);\n\n  if (p1Pos.x < p2Pos.x) {\n    lowX = p1Pos.x;\n    highX = p2Pos.x;\n  } else {\n    lowX = p2Pos.x;\n    highX = p1Pos.x;\n  }\n\n  const c = Math.sqrt((p1Pos.x - p2Pos.x) * (p1Pos.x - p2Pos.x) + (p1Pos.y - p2Pos.y) * (p1Pos.y - p2Pos.y));\n  const a = (highX - lowX);\n\n  if (pinnedPos >= lowX && pinnedPos <= highX) {\n    if (pinnedPos.y === ((pinnedPos.x * c) / a)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nconst isCollidedWith = (point, point2) => {\n  const pos1 = {x: point.position.x, y: point.position.y};\n  const pos2 = {x: point2.position.x, y: point2.position.y};\n  if (pos1 === pos2) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst animate = (currentTime) => {\n  if (!startTime) {\n    startTime = currentTime;\n    lastTime = currentTime;\n  } else {\n    timeElapsed = currentTime - lastTime;\n    lastTime = currentTime;\n\n    ctx.clearRect(0,0,width, height);\n\n    for (let i = 0; i < points.length; i++) {\n      points[i].solveLinkConstraints();\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      points[i].updatePos(timeElapsed);\n    }\n\n    checkCollisions(points);\n    checkLinkCollisions(points);\n\n    for (let i = 0; i < points.length; i++) {\n      points[i].render();\n    }\n  }\n\n  //\n  // ctx.save();\n  //\n  // ctx.restore();\n\n\n\n  requestAnimationFrame(animate);\n};\n\nanimate();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./physics.js\n// module id = 1\n// module chunks = 0","import Link from './link';\n\nconst canvas = document.getElementById(\"canvas\");\n// console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\nclass Point {\n  constructor(options) {\n    this.lastX = options.lastX;\n    this.lastY = options.lastY;\n    this.nextX = options.nextX;\n    this.nextY = options.nextY;\n    this.position = options.position;\n    this.velocity = options.velocity;\n    this.mass = options.mass;\n    this.radius = options.radius;\n    this.area = (Math.PI * this.radius * this.radius) / 10000;\n    this.pinned = options.pinned || false;\n    this.aX = options.aX || 0;\n    this.aY = options.aY || 9.81;\n    this.links = options.links || [];\n  }\n\n  updatePos(timeElapsed) {\n    // this.applyForce({x: 0, y: })\n    const seconds = timeElapsed / 100;\n\n    let deltaX = this.position.x - this.lastX;\n    let deltaY = this.position.y - this.lastY;\n\n    // damping velocity\n    deltaX *= 1;\n    deltaY *= 1;\n\n    this.nextX = this.position.x + deltaX + (0.5 * this.aX * seconds * seconds);\n    this.nextY = this.position.y + deltaY + (0.5 * this.aY * seconds * seconds);\n\n\n\n    this.lastX = this.position.x;\n    this.lastY = this.position.y;\n\n    if (!this.pinned) {\n      this.position.x = this.nextX;\n      this.position.y = this.nextY;\n    } else {\n      this.nextX = this.position.x;\n      this.nextY = this.position.y;\n    }\n  }\n\n  collideWith(pt2) {\n    if (!this.pinned) {\n      this.position.x = this.lastX;\n      this.position.y = this.lastY;\n    }\n  }\n\n  collideWithLink(link) {\n    link.point1.pinned = true;\n    link.point2.pinned = true;\n  }\n\n  applyForce(force) {\n    this.aX += force.x / this.mass;\n    this.aY += force.y / this.mass;\n  }\n\n  solveLinkConstraints() {\n    for (let i = 0; i < this.links.length; i++) {\n      this.links[i].solve();\n    }\n\n\n  }\n\n  addLinkTo(point2) {\n    const newLink = new Link({point1: this, point2: point2});\n    this.links.push(newLink);\n    point2.links.push(newLink);\n    console.log(this.links);\n  }\n\n  removeLink(link) {\n    this.links.splice(this.links.indexOf(link), 1);\n  }\n\n  render() {\n    // debugger;\n    // ctx.translate(point.position.x, point.position.y);\n    // ctx.clearRect(0,0,width, height);\n    ctx.fillStyle = 'blue';\n    ctx.strokeStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI*2, true);\n    ctx.fill();\n    ctx.closePath();\n\n    const links = this.links;\n\n    if (links.length > 0) {\n      for (let i = 0; i < links.length; i++) {\n        links[i].render();\n      }\n    }\n  }\n}\n\nexport default Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./point.js\n// module id = 2\n// module chunks = 0","// this method of constructing links using verlet integration was adopted from\n// this tutorial by Jared Counts https://gamedevelopment.tutsplus.com/tutorials/simulate-tearable-cloth-and-ragdolls-with-simple-verlet-integration--gamedev-519\n\nconst canvas = document.getElementById(\"canvas\");\n// console.log(\"canvas\",canvas);\nconst ctx = canvas.getContext(\"2d\");\n\nclass Link {\n  constructor(options) {\n    this.point1 = options.point1;\n    this.point2 = options.point2;\n    this.restingDistance = options.restingDistace || 100;\n    this.stiffness = options.stiffness || 1;\n    this.tearDist = options.tearDist || 1000000;\n    this.drawThis = options.drawThis || true;\n  }\n\n  solve() {\n    const p1 = this.point1.position;\n    const p2 = this.point2.position;\n    const m1 = this.point1.mass;\n    const m2 = this.point2.mass;\n\n    const difference = { x: p1.x - p2.x, y: p1.y - p2.y };\n    const d = Math.sqrt(difference.x * difference.x + difference.y * difference.y);\n\n    if (d > this.tearDist) {\n      this.point1.removeLink(this);\n    }\n\n    const scalarD = (this.restingDistance - d) / d;\n\n\n    const invMass1 = 1 / m1;\n    const invMass2 = 1 / m2;\n    const scalarP1 = (invMass1 / (invMass1 + invMass2)) * this.stiffness;\n    const scalarP2 = this.stiffness - scalarP1;\n\n\n    if (!this.point1.pinned) {\n      p1.x += difference.x * scalarP1 * scalarD;\n      p1.y += difference.y * scalarP1 * scalarD;\n    }\n\n    if (!this.point2.pinned) {\n      p2.x -= difference.x * scalarP2 * scalarD;\n      p2.y -= difference.y * scalarP2 * scalarD;\n    }\n  }\n\n  render() {\n    const p1 = this.point1.position;\n    const p2 = this.point2.position;\n    if (this.drawThis) {\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n    }\n  }\n}\n\nexport default Link;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./link.js\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}